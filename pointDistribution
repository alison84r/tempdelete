 public static List<Point> GetPointsOnSide(Line line, List<Point> points, Point vectorDirection)
    {
        List<Point> pointsOnSide = new List<Point>();

        // Calculate the normal vector of the line
        double normalVectorX = line.EndPoint.Y - line.StartPoint.Y;
        double normalVectorY = line.StartPoint.X - line.EndPoint.X;

        // Check if the vector direction is (1,0,0)
        if (vectorDirection.X == 1 && vectorDirection.Y == 0 && vectorDirection.Z == 0)
        {
            // Flip the normal vector if it points in the opposite x-direction
            if (normalVectorX < 0)
            {
                normalVectorX = -normalVectorX;
                normalVectorY = -normalVectorY;
            }
        }
        // Check if the vector direction is (0,1,0)
        else if (vectorDirection.X == 0 && vectorDirection.Y == 1 && vectorDirection.Z == 0)
        {
            // Flip the normal vector if it points in the opposite y-direction
            if (normalVectorY < 0)
            {
                normalVectorX = -normalVectorX;
                normalVectorY = -normalVectorY;
            }
        }
        else
        {
            throw new ArgumentException("Invalid vector direction. Only (1,0,0) or (0,1,0) are supported.");
        }

        // Check each point to see if it lies on the side specified by the normal vector
        foreach (Point point in points)
        {
            double vectorX = point.X - line.StartPoint.X;
            double vectorY = point.Y - line.StartPoint.Y;

            double dotProduct = vectorX * normalVectorX + vectorY * normalVectorY;

            if (dotProduct >= 0)
            {
                pointsOnSide.Add(point);
            }
        }

        return pointsOnSide;
    }
}
